<?xml version="1.0" encoding="utf-8"?>
<containers:SuperTabNavigator xmlns:fx="http://ns.adobe.com/mxml/2009" 
				 xmlns:s="library://ns.adobe.com/flex/spark" 
				 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" tabWidth="100" change="onTabChanged(event)" dragEnabled="false"
				 xmlns:containers="flexlib.containers.*" creationComplete="onCreated(event)">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	
	<fx:Metadata>
		[Event(name="onTabChanged", type="editor.extension.ExEvent")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import flexlib.controls.SuperTabBar;
			import flexlib.events.TabReorderEvent;
			
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
//			private var _itemClass:Class = null;
//			public function set itemClass(value:Class):void
//			{
//				_itemClass = value;
//			}
			
			private var _tabs:Vector.<ExTabContent> = new Vector.<ExTabContent>();  
			public function get tabs():Vector.<ExTabContent>
			{
				return _tabs;
			}
			public function appendTab(title:String,content:Object,itemClass:Class):ExTabContent
			{
				var tab:ExTabContent = checkExists(title);
				if(!tab)
				{
					if(null != itemClass)
					{
						tab = new itemClass();
					}
					else
					{
						tab = new ExTabContent();
					}
					if(tab)
					{
						tab.label = title;
					}
					
					tab.content = content;
					_tabs.push(tab);
					//addChild(tab);
					addElement(tab);
					tabBar.selectedIndex = _tabs.length - 1;
				}
				else
				{
					tabBar.selectedIndex = _tabs.indexOf(tab);
				}
				return tab;
			}
			
			protected function onTabChanged(event:IndexChangedEvent):void
			{
				debug("change tab[" + event.newIndex);
				var notify:ExEvent = new ExEvent(ExEvent.UI_TAB_CHANGE);
				notify.params = _tabs[event.newIndex];
				dispatchEvent(notify);
			}
			
			private function checkExists(title:String):ExTabContent
			{
				for each(var tab:ExTabContent in _tabs)
				{
					if(tab.label == title)
					{
						return tab;
					}
				}
				return null;
			}
			
			protected function onCreated(event:FlexEvent):void
			{
				SuperTabBar(super.tabBar).closePrepared = onTabCloseCheck;
			}
			
			private function onTabCloseCheck(index:int):Boolean
			{
				var result:Boolean = true;
				if(null != _checkFunc)
				{
					result = _checkFunc(index);
				}
				if(result)
				{
					_tabs.splice(index,1);
				}
				return result;
			}
			
			private var _checkFunc:Function = null;
			public function set onCloseTabCheckFunc(value:Function):void
			{
				_checkFunc = value;
			}
			
		]]>
	</fx:Script>
</containers:SuperTabNavigator>
